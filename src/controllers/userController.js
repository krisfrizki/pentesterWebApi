const { checkUsernameExist, registerUserModel, loginUserModel } = require("../models/userModel");
const {hashPassword, comparePasswords} = require('../services/authService');

// Kontroller untuk registrasi App Owner
const registerUserController = async (req, res) => {
    const {username, email, password} = req.body;

    // Validasi username, email, dan password
    const validUsername = /^[a-z0-9_]+$/;
    const userExists = await checkUsernameExist(username);

    if(!username || !email || !password){
        return res.status(400).json({
            status: 'fail',
            message: 'username, email, dan password wajib diisi!'
        });
    } else if(!validUsername.test(username)){
        return res.status(400).json({
            status: 'fail',
            message: 'username tidak boleh menggunakan spasi / huruf kapital / karakter unik!'
        })
    } else if (userExists){
        return res.status(400).json({
            status: 'fail',
            message: 'username sudah terdaftar'
        })
    } else {
        // Melakukan hash password sebelum menyimpan
        const hashedPassword = await hashPassword(password);
        // Memanggil model untuk melakukan registrasi pengguna
        const registrationResult = await registerUserModel(username, email, hashedPassword);
        
        // Menangani hasil registrasi
        if(registrationResult.status) {
            return res.status(201).json({
                status: 'success',
                message: registrationResult.message
            })
        } else {
            return res.status(400).json({
                status: 'fail',
                message: registrationResult.message
            })
        }
    }
};

const loginUserController = async (req, res) => {
    const {username, password} = req.body;

    const userData = await loginUserModel(username);
    const passwordMatch = await comparePasswords(password, userData.password);
    const userRole = userData.role;
    
    try {
        if(!username || !password) {
            return res.status(400).json({
                status: 'fail',
                message: 'Username dan Password wajib diisi'
            })
        } else if(!userData) {
            return res.status(400).json({
                status: 'fail',
                message: 'Username salah'
            }) 
        } else if(!passwordMatch) {
            return res.status(400).json({
                status: 'fail',
                message: 'password salah'
            })
        } else {
            return res.status(200).json({
                status: 'success',
                message: 'Login sukses',
                role: userRole
              });
        }
    } catch (error) {
        console.log('Kesalahan pada login', error);
        return res.status(500).json({
            status: 'error',
            message: 'Terjadi kesalahan server internal'
        });
    }

}

module.exports = {
    registerUserController,
    loginUserController
};